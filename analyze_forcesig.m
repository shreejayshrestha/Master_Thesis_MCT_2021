% analyze_forcesig_PS.m

load forcesigtimedom_mb_48000Hz_mf_ff.mat

nsigs = 12;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% We "clean up" the force signals as we load them:
% There seems to be a tiny little DC offset, which can be observed
% in the first 6700 samples, before the main pulse, so we do this:
% 1. FInd the average signal value in the initial part, and subtract it.
% 2. Remove the 6700 first samples.
% 3. Apply a short half-Hanning window, which means a gentle "fade-in" 
%    during the first 150 samples, to avoid clicks at the onset of the
%    signal.


ivinitial = [1:6700];
startwin = hanning(300);
startwin = startwin(1:150);

ivfinal = [1:6800];


for ii = 1:nsigs
    oneforcesig = upsampalign{1,1}{ii};
    oneforcesig = oneforcesig - mean(oneforcesig(ivinitial));
    oneforcesig = oneforcesig(ivinitial(end)+1:end);
    oneforcesig(1:length(startwin)) = oneforcesig(1:length(startwin)).*startwin;
    if ii == 1
        forcesigs_mf = zeros(length(oneforcesig),nsigs);
    end    
    forcesigs_mf(:,ii) = oneforcesig;
end

% Plot the loaded, and cleaned, force signals

figure(1)
h = plot(forcesigs_mf);
g = xlabel(['Sample number    [-]']);
set(g,'FontSize',14);
g = title('The force signals, upsampled to 48 kHz');
set(g,'FontSize',14);
grid

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Calculate the spectra and plot together with a simplified model of the
% force signal, which is generated with an IIR low-pass filter. 
% Find the low-frequency amplitude.

fLPmodel = 60;

fs = 48000;
nfft = 32768;
F = fft(forcesigs_mf,nfft);
fvec = fs/nfft*[0:nfft/2-1];

LFamp = mean(mean(abs(F(2:10,:))));

[Bmodel,Amodel] = butter(2,fLPmodel/(fs/2));
irmodel = zeros(nfft/8,1);
irmodel(1) = LFamp;
irmodel = filter(Bmodel,Amodel,irmodel);

Fmodel = fft(irmodel,nfft);

figure(2)
h = semilogx(fvec,20*log10(abs(Fmodel(1:nfft/2,:))),fvec,20*log10(abs(F(1:nfft/2,:))));
set(h(1),'LineWidth',2)
g = xlabel(['Frequency   [Hz]']);
set(g,'FontSize',14);
g = ylabel(['Force spectrum magnitude   [dB] uncal.']);
set(g,'FontSize',14);
grid
g = title(['Force spectra, together with a model = 2nd order LP-filter at ',num2str(fLPmodel),' Hz']);
set(g,'FontSize',14);
g = legend('Model = LP-filter','Measured spectra');
set(g,'FontSize',14);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Construct an equalization filter based on the model.
% We add an extra LP filter around 300 Hz since we don't any information
% above 300 Hz from the measurements anyway.

extraLPfrequency = 300;

[BextraLP,AextraLP] = butter(2,extraLPfrequency/(fs/2));

% We construct IIR filter coefficients from the inverse of the model, 
% and the extra LP filter.
Beqtot = conv(BextraLP,Amodel);
Aeqtot = conv(AextraLP,Bmodel/Bmodel(1));

% Now we construct an FIR filter from the IIR filter coefficients.
% We arbitrarily give it a long length to begin with (nfft/4), and then cut
% it to a length where the FIR filter amplitude has died out to very low
% values, and that seems to happen within 400 samples.

irEQ = zeros(nfft/4,1);
irEQ(1) = 1;
irEQ = filter(Beqtot,Aeqtot,irEQ);
irEQ = irEQ(1:400);

% We enforce the equalization filter to have the response 0 dB for very low
% frequencies

irEQ = irEQ/sum(irEQ);

% Plot the impulse response of the equalization filter

figure(3)
h = plot([irEQ]);
set(h(1),'LineWidth',2)
g = xlabel(['Sample number    [-]']);
set(g,'FontSize',14);
g = title('The impulse response of the equalization filter');
set(g,'FontSize',14);
grid

% Plot the frequency response of the equalization filter

FEQ = fft(irEQ,nfft);
figure(4)
h = semilogx(fvec,20*log10(abs(FEQ(1:nfft/2,:))));
set(h(1),'LineWidth',2)
grid
g = xlabel(['Frequency   [Hz]']);
set(g,'FontSize',14);
g = ylabel(['Frequency response magnitude   [dB]']);
set(g,'FontSize',14);
g = title('The frequency response of the equalization filter');
set(g,'FontSize',14);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Now we filter the force signals with the equalization filter, and we
% cut away the end of the equalized force signals since there is some click
% generated by the ending of the measured force signals.

for ii = 1:nsigs
    oneEQsignal = contwo(forcesigs_mf(:,ii),irEQ);
    oneEQsignal = oneEQsignal(ivfinal);
   if ii == 1
       forceEQ = zeros(length(oneEQsignal),nsigs);
   end
   forceEQ(:,ii) = oneEQsignal;    
end

% Also convert them to spectra

FforceEQ = fft(forceEQ,nfft);

% Plot the time signals

figure(5)
h = plot(forceEQ);
g = xlabel(['Sample number    [-]']);
set(g,'FontSize',14);
g = title('The force signals, upsampled to 48 kHz, and equalized');
set(g,'FontSize',14);
grid

figure(6)
h = semilogx(fvec,20*log10(abs(FforceEQ(1:nfft/2,:))),...
    fvec,20*log10(abs(F(1:nfft/2,:))));
grid
g = xlabel(['Frequency   [Hz]']);
set(g,'FontSize',14);
g = ylabel(['Force spectra magnitude   [dB]']);
set(g,'FontSize',14);
g = title('Spectra of the force signals, before and after eq.');
set(g,'FontSize',14);

maxlevel = 20*log10(LFamp);
maxplotlevel = ceil(maxlevel/10)*10;
ylim([maxplotlevel-60 maxplotlevel])






